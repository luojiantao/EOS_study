
#configure_file(${CMAKE_CURRENT_SOURCE_DIR}/core_symbol.hpp.in ${CMAKE_CURRENT_BINARY_DIR}/core_symbol.hpp)
message("||||||||||eosiolib")


set( JSONCPP_INCLUDE_DIR ${CMAKE_CURRENT_SOURCE_DIR}/include )

set( PUBLIC_HEADERS
${JSONCPP_INCLUDE_DIR}/json/config.h
        ${JSONCPP_INCLUDE_DIR}/json/forwards.h
    ${JSONCPP_INCLUDE_DIR}/json/features.h
        ${JSONCPP_INCLUDE_DIR}/json/value.h
       ${JSONCPP_INCLUDE_DIR}/json/reader.h
       ${JSONCPP_INCLUDE_DIR}/json/writer.h
    ${JSONCPP_INCLUDE_DIR}/json/assertions.h
         ${JSONCPP_INCLUDE_DIR}/json/version.h
         ${JSONCPP_SRC_DIR}/json_tool.h
         ${JSONCPP_SRC_DIR}/json_valueiterator.inl
)

set(JSONCPP_SRC_DIR ${CMAKE_CURRENT_SOURCE_DIR}/src/lib_json)
set(jsoncpp_sources
        #${JSONCPP_SRC_DIR}/json_tool.hpp
         ${JSONCPP_SRC_DIR}/json_reader.cpp
         #${JSONCPP_SRC_DIR}/json_valueiterator.inl
         ${JSONCPP_SRC_DIR}/json_value.cpp
         ${JSONCPP_SRC_DIR}/json_writer.cpp
         #${JSONCPP_SRC_DIR}/version.h.in
         )


 #set(STANDARD_INCLUDE_FOLDERS ${STANDARD_INCLUDE_FOLDERS} ${JSONCPP_INCLUDE_DIR}) 


add_wast_library(TARGET eosiojsoncpp
        INCLUDE_FOLDERS "${STANDARD_INCLUDE_FOLDERS}" "${PUBLIC_HEADERS}" "${JSONCPP_INCLUDE_DIR}"
  SOURCE_FILES "${jsoncpp_sources}"
  LIBRARIES libc libc++ eosiolib
  DESTINATION_FOLDER ${CMAKE_CURRENT_BINARY_DIR}
)
